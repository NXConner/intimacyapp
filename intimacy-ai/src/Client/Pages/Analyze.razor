@page "/analyze"
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Forms
@inject IntimacyAI.Client.Services.SettingsService AppSettingsService

<h3>Analyze</h3>

<InputFile OnChange="OnFileChange" />
<button class="btn btn-primary" @onclick="Upload" disabled="@(!canUpload)">Upload</button>
<p>@status</p>
@if (result is not null)
{
    <div class="card mt-3">
        <h5>Results</h5>
        <p><strong>Session:</strong> @result.sessionId</p>
        <p><strong>Arousal:</strong> @FormatScore("arousal") | <strong>Engagement:</strong> @FormatScore("engagement")</p>
        <p><small>@(result.metadata is not null && result.metadata.TryGetValue("width", out var w) && result.metadata.TryGetValue("height", out var h) ? $"{w}x{h}" : "")</small></p>
    </div>
}

@code {
    IBrowserFile? file;
    bool canUpload => file is not null;
    string status = "";
    HubConnection? hub;
    string? apiKey;
    AnalysisResultDto? result;

    [Inject] HttpClient Http { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        apiKey = await AppSettingsService.GetApiKeyAsync();
        var baseUrl = Http.BaseAddress?.ToString()?.TrimEnd('/');
        hub = new HubConnectionBuilder()
            .WithUrl($"{baseUrl}/hubs/analysis")
            .WithAutomaticReconnect()
            .Build();
        hub.On<string>("analysisStarted", id => status = $"Started: {id}");
        hub.On<string>("analysisCompleted", async id =>
        {
            status = $"Completed: {id}";
            try
            {
                using var req = new HttpRequestMessage(HttpMethod.Get, $"/api/analysis/{id}");
                if (!string.IsNullOrWhiteSpace(apiKey)) req.Headers.Add("X-API-Key", apiKey);
                using var res = await Http.SendAsync(req);
                if (res.IsSuccessStatusCode)
                {
                    result = await res.Content.ReadFromJsonAsync<AnalysisResultDto>();
                }
            }
            catch { }
            StateHasChanged();
        });
        await hub.StartAsync();
    }

    private void OnFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
        status = file is null ? "" : $"Selected {file.Name}";
    }

    private string FormatScore(string key)
    {
        if (result?.scores is null) return "-";
        if (!result.scores.TryGetValue(key, out var obj) || obj is null) return "-";
        if (obj is JsonElement je)
        {
            if (je.ValueKind == JsonValueKind.Number && je.TryGetDouble(out var d))
                return d.ToString("0.000");
        }
        if (double.TryParse(obj.ToString(), out var val))
            return val.ToString("0.000");
        return obj.ToString() ?? "-";
    }

    public sealed class AnalysisResultDto
    {
        public string? sessionId { get; set; }
        public string? analysisType { get; set; }
        public Dictionary<string, object>? scores { get; set; }
        public Dictionary<string, string>? metadata { get; set; }
        public DateTime createdAtUtc { get; set; }
    }

    private async Task Upload()
    {
        if (file is null) return;
        try
        {
            var content = new MultipartFormDataContent();
            using var stream = file.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024);
            content.Add(new StreamContent(stream), "file", file.Name);
            using var req = new HttpRequestMessage(HttpMethod.Post, "/api/analyze") { Content = content };
            if (!string.IsNullOrWhiteSpace(apiKey)) req.Headers.Add("X-API-Key", apiKey);
            using var res = await Http.SendAsync(req);
            if (res.IsSuccessStatusCode)
            {
                status = "Uploaded";
                var json = await res.Content.ReadAsStringAsync();
                var options = new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                var accept = System.Text.Json.JsonSerializer.Deserialize<AcceptResponse>(json, options);
                if (!string.IsNullOrWhiteSpace(accept?.sessionId) && hub is not null)
                {
                    await hub.InvokeAsync("JoinSession", accept.sessionId);
                }
            }
            else
            {
                status = $"Failed ({(int)res.StatusCode})";
            }
        }
        catch (Exception ex)
        {
            status = $"Error: {ex.Message}";
        }
    }

    private sealed class AcceptResponse
    {
        public string? sessionId { get; set; }
    }
}